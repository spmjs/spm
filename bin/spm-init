#!/usr/bin/env node

var file = require('../lib/sdk/file');
var path = require('path');
var commander = require('commander');
var color = require('colorful').color;
var spmrc = require('spmrc');
var gulp = require('gulp');
var gulpTemplate = require('gulp-template');
var inquirer = require('inquirer');
var semver = require('semver');
var spawn = require('child_process').spawn;
var NAME_REGEX = require('../lib/sdk/iduri').NAME_REGEX;

/*
  template directory
*/
var homeDir = process.env.HOME || process.env.USERPROFILE;
if (!homeDir) {
  homeDir = process.env.HOMEDRIVE + process.env.HOMEPATH;
}
var defaultTemplate = path.dirname(__dirname) + '/lib/template/';
var template = exports.template = (spmrc.get('init.template') || defaultTemplate).replace(/^~/, homeDir);

/*
  commander init
*/

commander
  .option('-f, --force', 'force to process the task.')
  .option('--verbose', 'show more infomation')
  .option('--no-color', 'disable colorful print');

commander.on('--help', function() {
  console.log();
  console.log('  Change init default template in ~/.spm/spmrc-3x');
  console.log();
  console.log(color.magenta('  [init]'));
  console.log('  template = ' + defaultTemplate);
  console.log();
});

commander.parse(process.argv);


/*
  fetch template if not exist
*/

runTask();

/*
  run init task
*/

function runTask() {

  if (!file.isEmptyDir(process.cwd())) {
    console.warn(color.yellow('Existing files here, please run init command in an empty folder!'));
    return;
  }

  console.log('Creating a spm package: ');
  inquirer.prompt([{
    message: 'Package name',
    name: 'name',
    default: path.basename(process.cwd()),
    validate: function(input) {
      var done = this.async();
      if (!NAME_REGEX.test(input)) {
        console.warn(color.red("Must be only lowercase letters, numbers, dashes or dots, and start with lowercase letter."));
        return;
      }
      done(true);
    }
  }, {
    message: 'Version',
    name: 'version',
    default: '0.0.0',
    validate: function(input) {
      var done = this.async();
      if (!semver.valid(input)) {
        console.warn(color.red("Must be a valid semantic version (semver.org)."));
        return;
      }
      done(true);
    }
  }, {
    message: 'Description',
    name: 'description'
  }, {
    message: 'Author',
    name: 'author',
    default: require('whoami')
  }], function( answers ) {
    answers.varName = answers.name.replace(/\-(\w)/g, function(all, letter){
      return letter.toUpperCase();
    });
    answers.yuanUrl = spmrc.get('registry');

    gulp.src(path.join(template, '**'), {
         dot: true
       })
      .pipe(gulpTemplate(answers))
      .pipe(gulp.dest('./'));

    console.log(color.green('Initialize a spm package Succeccfully!'));
  });
}
